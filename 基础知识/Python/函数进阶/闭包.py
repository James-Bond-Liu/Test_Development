# -*- coding: utf-8 -*-
# @Time :2021/7/11 18:21
# @Author : liufei
# @File :闭包.PY

# 闭包函数的实例
# outer是外部函数 a和b都是外函数的临时变量
def outer(a):
    b = 10
    print("这是外部函数")

    def inner():  # inner是内函数
        print("这是内部函数")
        print(a + b)  # 在内函数中 用到了外函数的临时变量(非全局变量)

    return inner  # 外函数的返回值是内函数的引用


if __name__ == '__main__':
    demo = outer(5)  # 输出“这是外部函数”。调用外部函数，同时将内部函数的引用存储给了demo
    # 在这里我们调用外函数传入参数5
    # 此时外函数两个临时变量 a是5 b是10 ，并创建了内函数，然后把内函数的引用返回存给了demo
    # 外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数

    demo()  # 输出“这是内部函数，15”。在函数外部直接调用内部函数
    # 我们调用内部函数，看一看内部函数是不是能使用外部函数的临时变量
    # demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数
    demo2 = outer(7)
    demo2()  # 17

"""闭包中内函数修改外函数局部变量

在内函数中想修改闭包变量（外函数绑定给内函数的局部变量）的时候：可以用nonlocal 关键字声明 一个变量，\
表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。
"""


# 修改闭包变量的实例
# outer是外部函数 a和b都是外函数的临时变量
def outer(a):
    b = 10  # a和b都是闭包变量
    c = [a]  # 这里对应修改闭包变量的方法2

    def inner():  # inner是内函数
        # 内函数中想修改闭包变量
        # 方法1 nonlocal关键字声明
        nonlocal b  # nonlocal用于引用外层函数局部变量的声明。
        b += 1  # 如果仅仅是在内部函数引用外层函数的变量，不用加nonlocal声明。当需要在内层函数对外层函数的变量进行修改时，需要加上nonlocal声明
        # 方法二，把闭包变量修改成可变数据类型 比如列表
        c[0] += 1
        print(c[0])
        print(b)

    return inner  # 外函数的返回值是内函数的引用


if __name__ == '__main__':
    demo = outer(5)
    demo()  # 6  11
